name: CI for AI

# This workflow tests Copilot's development practices by:
# 1. Creating dynamic comments on PRs to trigger Copilot sessions with new feature requests
# 2. Validating that proper development practices are followed
# 3. Using UUID-based quote identifiers (--quote-<uuid>) to ensure uniqueness
#
# The workflow generates a unique UUID for each quote request to avoid conflicts
# with previously implemented features, ensuring Copilot always gets a fresh session.

on:
  schedule:
    # Daily at 06:00 UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  create-test-comment:
    # Create dynamic comment requesting unique quote feature with UUID
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create CI/AI test comment
        id: create-comment
        env:
          GITHUB_TOKEN: ${{ secrets.GH_AUTOMATION_TOKEN }}
        run: |
          PR_NUMBER=3
          
          # Generate a UUID for the quote identifier to ensure uniqueness
          echo "🎯 Generating UUID for unique quote identifier..."
          QUOTE_UUID=$(cat /proc/sys/kernel/random/uuid)
          
          echo "📊 Generated quote UUID: $QUOTE_UUID"
          
          # Create comment body with the UUID-based quote identifier
          COMMENT_BODY="@copilot please create a new feature to support a \"--quote-$QUOTE_UUID\" argument which prints a famous quote. This should be invoked like \`sbt \"helloWorld/run --quote-$QUOTE_UUID\"\` and display an inspiring or famous quote."

          # Create the comment using proper JSON formatting with jq
          COMMENT_PAYLOAD=$(jq -n \
            --arg body "$COMMENT_BODY" \
            '{
              body: $body
            }')

          COMMENT_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments" \
            -d "$COMMENT_PAYLOAD")

          COMMENT_ID=$(echo "$COMMENT_RESPONSE" | jq -r '.id')
          
          # Check if comment creation was successful
          if [ "$COMMENT_ID" = "null" ] || [ -z "$COMMENT_ID" ]; then
            echo "❌ Failed to create comment. API response:"
            echo "$COMMENT_RESPONSE"
            exit 1
          fi
          
          echo "✅ Created comment #$COMMENT_ID on PR #$PR_NUMBER requesting --quote-$QUOTE_UUID feature"
          echo "comment-id=$COMMENT_ID" >> $GITHUB_OUTPUT
          echo "quote-id=$QUOTE_UUID" >> $GITHUB_OUTPUT
